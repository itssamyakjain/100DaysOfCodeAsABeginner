// method 1 with 2 traversals using the length of the linked list

public static void findnthNode(Node head,int n) {
		
		int size=0;
		
    // finds the length of linked list
		for(Node curr=head; curr!=null ; curr=curr.next)
			size++;
		
    // if the given n becomes invalid
		if(n>size)
			return;
		
    //finds the nth node from the end 
		Node curr = head;
		for(int i=size-n+1;i>0;i--)
			curr=curr.next;
		System.out.println(curr.key);
}


// method 2 with 1 traversal without finding the length of linked list
// using two pointers/references

public static void find(Node head,int n) {
		
		if(head==null)
			return;
		// initially move first node n positions ahead and start moving second node from head
		Node first = head;
		for(int i=0; i<n ; i++) {
			if(first==null)			// if given n turns to be invalid return nothing
				return;
			first=first.next;	
		}
		Node second = head;
		
		// now move both references by one position 
		// second reference key gives the nth node from end
		while(first!=null) {
			first=first.next;
			second=second.next;
		}
		System.out.println(second.key);
		
	}
